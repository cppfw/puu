apply plugin: "com.android.model.library"

//String getAbi() {
//    String taskName = getGradle().startParameter.taskNames[0]
//    String abi;
//
//    println("Gradle: task name = " + taskName)
//
//    if (taskName == null) {
//        return ""
//    }
//
//    println("Gradle: Build = " + taskName)
//
//    if (taskName.contains("Arm_64")) {
//        abi = "arm64-v8a"
//    } else if (taskName.contains("Arm")) {
//        abi = "armeabi-v7a"
//    } else if (taskName.contains("X86_64")) {
//        abi = "x86_64"
//    }
//    println("Gradle: ABI name: " + abi)
//    return abi;
//}

model {

    android {
        compileSdkVersion = 25
        buildToolsVersion = '25.0.2'


        defaultConfig {
            minSdkVersion.apiLevel = 9
            targetSdkVersion.apiLevel = 9
            versionCode = 1
            versionName = '1.0'
        }
        ndk {
            platformVersion = 21
            moduleName = "stob"
            toolchain = 'clang'
            abiFilters.addAll(['armeabi', 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64', 'mips', 'mips64']) //this is default
            ldLibs.addAll(['android', 'log'])
            stl = 'c++_static'
            cppFlags.add("-std=c++11")
            cppFlags.add("-fexceptions")
            cppFlags.add("-frtti")
            cppFlags.add("-I" + projectDir.getAbsolutePath() + "/build/ndkLibs/include")
//            ldFlags.add("-L" + projectDir.getAbsolutePath() + "/build/ndkLibs/${getAbi()}")
        }

    }

    android.lintOptions {
        abortOnError false
    }


    android.sources {
        main {
            jni {
                exportedHeaders {
                    srcDir "../../src/"
                }
                source {
                    srcDirs '../../src'
                }
            }
        }
    }

}

repositories {
    maven {
        url 'https://dl.bintray.com/igagis/android/'
    }
}
dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'io.github.igagis:libpapki:+'
    compile 'io.github.igagis:libunikod:+'
}


//===================================
//=== Extract NDK files from AARs ===

task extractNDKLibs {
    doLast {
        configurations.compile.each {
            def file = it.absoluteFile
            copy {
                from zipTree(file)
                into "build/"
                include "ndkLibs/**/*"
            }
        }
    }
}
build.dependsOn('extractNDKLibs')
tasks.whenTaskAdded { task ->
    if (task.name.startsWith('compile')) {
        task.dependsOn('extractNDKLibs')
    }
}



//=================================
//=== pack library files to aar ===


def aarName = name

task copyNdkLibsToAAR(type: Zip) {
    baseName = aarName
    version = "\$(version)"
    extension = 'aar.in'
    destinationDir = file('..') //put resulting AAR file to upper level directory

    from zipTree("build/outputs/aar/" + aarName + "-release.aar")
    exclude('**/*.so') //do not include shared libraries into final AAR
    from("../../src") {
        exclude('makefile')
        exclude('soname.txt')
        into('ndkLibs/include')
    }
    from("build/intermediates/binaries/debug/lib"){
        include('**/*.a')
        into('ndkLibs')
    }
}

build.finalizedBy('copyNdkLibsToAAR')